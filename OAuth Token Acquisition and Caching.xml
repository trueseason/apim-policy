<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <cache-lookup-value key="oauth-token-key" variable-name="access-token" caching-type="internal" />
        <choose>
            <when condition="@(!context.Variables.ContainsKey("access-token"))">
                <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
                    <!-- i.e. https://login.microsoftonline.com/tenant-id/oauth2/v2.0/token -->
                    <set-url>{{authorizationServer}}</set-url>
                    <set-method>POST</set-method>
                    <set-header name="Content-Type" exists-action="override">
                        <value>application/x-www-form-urlencoded</value>
                    </set-header>
                    <set-body>@{
                        return "client_id={{clientId}}&scope={{scope}}&client_secret={{clientSecret}}&grant_type=client_credentials";
                    }</set-body>
                </send-request>
                <set-variable name="access-token" value="@((String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>(preserveContent: true)["access_token"])" />
                <set-variable name="token-expires-in" value="@((int)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>(preserveContent: true)["expires_in"])" />
                <cache-store-value key="oauth-token-key" value="@((String)context.Variables["access-token"])" duration="@((int)context.Variables["token-expires-in"] - 300)" caching-type="internal" />
            </when>
        </choose>
        <set-header name="Authorization" exists-action="override">
            <value>@("Bearer " + (String)(context.Variables["access-token"]))</value>
        </set-header>
        <set-header name="Sample-Header" exists-action="override">
            <value>Sample-Header-Value</value>
        </set-header>
        <set-header name="Authorization" exists-action="delete" />
        <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
        <set-backend-service base-url="Backend-Url" />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>