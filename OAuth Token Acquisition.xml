<!-- The policy defined in this file provides an example of using OAuth2 for authorization between the gateway and a backend. -->
<!-- It shows how to obtain an access token from Azure AD and forward it to the backend. -->

<!-- Send request to Azure AD to obtain a bearer token -->
<!-- Parameters: authorizationServer - format https://login.windows.net/TENANT-GUID/oauth2/token -->
<!-- Parameters: scope - a URI encoded scope value -->
<!-- Parameters: clientId - an id obtained during app registration -->
<!-- Parameters: clientSecret - a URL encoded secret, obtained during app registration -->

<!-- Copy the following snippet into the inbound section. -->

<![CDATA[
    //TestEnv = SiT or UaT
    //TestClientIDs = {"sit": "b23ec2e5-7caa-4e1a-87fb-8af8f62d2a6e","uat": "uat-clientID"}
    //test-client-id-sit = b23ec2e5-7caa-4e1a-87fb-8af8f62d2a6e
    
    <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
        <set-url>{{authorizationServer}}</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
            <value>application/x-www-form-urlencoded</value>
        </set-header>
        <set-body>@{
            var isSIT = "{{TestEnv}}"?.ToLower() == "sit";
            var clientId = isSIT ? "{{test-client-id-sit}}" : "{{test-client-id-uat}}";
            var scope = isSIT ? "{{test-scope-sit}}" : "{{test-scope-uat}}";
            var secret = isSIT ? "{{test-secret-sit}}" : "{{test-secret-uat}}";
            return $"client_id={clientId}&scope={scope}&client_secret={secret}&grant_type=client_credentials";
        }</set-body>
    </send-request>

    <set-variable name="currentEnv" value="{{TestEnv}}" />
    <set-variable name="clientIDList" value="{{TestClientIDs}}" />
    <set-variable name="scopeList" value="{{TestScopes}}" />
    <set-variable name="secretList" value="{{TestSecrets}}" />
    <set-header name="Test001" exists-action="override">
        <value>@{
            string env1 = (string)context.Variables.GetValueOrDefault<string>("currentEnv");
            string env = (string)context.Variables.GetValueOrDefault<string>("currentEnv").ToLower();
            JObject clientIDs = JObject.Parse((string)context.Variables.GetValueOrDefault<string>("clientIDList"));
            JObject scopes = JObject.Parse((string)context.Variables.GetValueOrDefault<string>("scopeList"));
            JObject secrets = JObject.Parse((string)context.Variables.GetValueOrDefault<string>("secretList"));
            return $"{env1}: client_id={clientIDs[env]?.ToString()}&scope={scopes[env]?.ToString()}&client_secret={secrets[env]?.ToString()}&grant_type=client_credentials";
        }</value>
    </set-header>
    
    <choose>
        <when condition="@("{{TestEnv}}"?.ToLower() == "uat")">
            <set-backend-service base-url="{{Test-Func-HttpEcho-Url-1}}" />
        </when>
        <otherwise>
            <set-backend-service base-url="{{Test-Func-HttpEcho-Url-2}}" />
        </otherwise>
    </choose>
    
    <set-backend-service base-url="@("{{TestEnv}}"?.ToLower() == "uat" ? "{{Test-Func-HttpEcho-Url-1}}" : "{{Test-Func-HttpEcho-Url-2}}")" />
]]>

<policies>
  <inbound>
      <base />
      <send-request ignore-error="true" timeout="20" response-variable-name="bearerToken" mode="new">
        <!-- i.e. https://login.microsoftonline.com/tenant-id/oauth2/v2.0/token -->
        <set-url>{{authorizationServer}}</set-url>
        <set-method>POST</set-method>
        <set-header name="Content-Type" exists-action="override">
          <value>application/x-www-form-urlencoded</value>
        </set-header>
        <set-body>
          @{
              return "client_id={{clientId}}&scope={{scope}}&client_secret={{clientSecret}}&grant_type=client_credentials";
              // &resource={{resource1}}&audience={{audience1}}

              // For Azure AD v1, try return statement below
              // return "client_id={{clientId}}&resource={{scope}}&client_secret={{clientSecret}}&grant_type=client_credentials";
          }
        </set-body>
      </send-request>
      <set-header name="Authorization" exists-action="override">
        <value>
          @("Bearer " + (String)((IResponse)context.Variables["bearerToken"]).Body.As<JObject>()["access_token"])
      </value>
      </set-header>

      <!--  Don't expose APIM subscription key to the backend. -->
      <set-header name="Ocp-Apim-Subscription-Key" exists-action="delete" />
      <set-backend-service base-url="{{Backend-Url}}" />
  </inbound>
  <backend>
    <base />
  </backend>
  <outbound>
    <base />
  </outbound>
  <on-error>
    <base />
  </on-error>
</policies>